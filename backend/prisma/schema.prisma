// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            Int            @id @default(autoincrement())
  fullName      String
  mobile        String         @unique
  password      String
  role          String         @default("USER") // Replaced enum with String
  pets          Pet[]
  consultations Consultation[]
  payments      Payment[]
  doctor        Doctor? // Relation to Doctor
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Pet {
  id            Int            @id @default(autoincrement())
  name          String
  petType       String // e.g., "dog", "cat", "other"
  breed         String
  age           Int
  gender        String
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       Int
  consultations Consultation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Doctor {
  id            Int            @id @default(autoincrement())
  name          String
  specialty     String
  consultations Consultation[]
  user          User?          @relation(fields: [userId], references: [id])
  userId        Int?           @unique
}

model Consultation {
  id                 Int      @id @default(autoincrement())
  consultationType   String
  description        String
  medicalDocuments   String? // Stored as a single string (e.g., comma-separated URLs)
  videos             String? // Stored as a single string
  audioFiles         String? // Stored as a single string
  status             String   @default("PENDING_PAYMENT") // Replaced enum with String
  scheduledDate      DateTime?
  user               User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId             Int
  pet                Pet      @relation(fields: [petId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  petId              Int
  doctor             Doctor?  @relation(fields: [doctorId], references: [id])
  doctorId           Int?
  payment            Payment?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Payment {
  id             Int      @id @default(autoincrement())
  amount         Float
  paymentReceipt String? // URL to the receipt image
  paymentMethod  String   @default("card") // payment method
  paymentDate    DateTime @default(now()) // when payment was made
  description    String? // payment description
  status         String   @default("PENDING_VERIFICATION") // Replaced enum with String
  user           User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId         Int
  consultation   Consultation? @relation(fields: [consultationId], references: [id])
  consultationId Int?     @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}